1. What are the four steps of mergesort?

1.split the array in half
2.mergesort the left half of the array
3.mergesort the right half of the array
4.rejoin the two halves once sorting is complete

2. Using JavaScript, generate a random number
between 50 and 100.

Math.random() * 50 + 50;

3. Using Javascript, generate a random number
between -100 and 100.

Math.random() * 200 - 100;

4. Write a coin flip function. It should return
the string "heads" half the time and the string
"tails" the other half

function coinFlip(){
  var a = (Math.random() < .5);
  if (a) { return 'heads'
  }
  else {
  return 'tails'
  }
};

5. Re-state the following expression without
using negation: !(10 > x)

(10 <= x)

6. Re-state the following expression without
using negation: !(a > 10 && b <= 5)

(a <= 10 || b > 5)

7. Re-state the following expression without
repeating variable a: (a && x <= 10) || (a && y < 0)

a &&(x <= 10 || y < 0)

8. Re-state the following expression without negations:
!( (a > 10) || (b > 10) || (c > 10) || (isAdmin) )

(a <= 10) && (b <= 10) && (c <= 10) && (isAdmin = false)

9. Write a function which, given a 2-d array of strings,
returns the concatenation of all the strings.

function twodconcat(arr){
newArr = [];
  for(var i = 0; i < arr.length; i++){
    for(var j = 0; j < arr[i].length; j++){
      newArr.push(arr[i][j]);
    }
  }
  return newArr;
};

10. Write a function which, given a 2-d array and another
value x, returns true if x is present in the 2-d array,
and false otherwise.

function containsElement(arr, x){
    for(var i = 0; i < arr.length; i++){
        for(var j = 0; j < arr[i].length; j++){
        if(arr[i][j] == x)
        }
    }
    return true;
};


11. Write a function which, given an two sorted arrays of
sizes m and n, returns a larger sorted array of size m+n.
This function must work in O(m+n) time.

function twoSorted(m, n){
var newArray = [];
var arr1 = 0;
var arr2 = 0;
    while (arr1 + arr2 < m.length + n.length){
        if(!n[arr2] || m[arr1] <= n[arr2]){
        newArray.push(m[arr1]);
        arr1++;
        }
        else if(!m[arr1] || m[arr1] > n[arr2]){
        newArray.push(n[arr2]);
        arr2++;
        }
    }
return newArray;
};

12. Given the following edge list, draw the graph. Use MS
Paint and include the file in your repo.

E = [[1,2], [2,3], [4,5], [2,4], [1,5]  ]

see Question12.png

13. Given the following adjacency Matrix, determine whether
the graph is directed or undirected and draw it.
M = [
  [0,0,1,0,1],
  [0,0,0,0,1],
  [0,1,0,0,0],
  [0,1,0,0,0],
  [0,0,0,0,1],
]

directed graph, see Question13.png

14. For exercises 9 and 10, if you assume that n is the
size of one side of the matrix, what is the time complexity
(Big Oh) of the algorithms you wrote?

9. O(N^2)
10. O(N^2)

15. What is the time complexity of the following function?

  function thugPop(arr){
    var ret = [];
    for (var i === 0; i < arr.length; i++){
      if (arr[i] % 15 == 0) ret.push('thugPop');
      else if (arr[i] % 5 == 0) ret.push('thug');
      else if (arr[i] %3 == 0 ) ret.push('pop');
      else ret.push(arr[i]);
    }
    return ret;
  }

O(N)

16. What is the time complexity of the following function?
  function thugify(schoolList){
    return schoolList.map(function(schoolObj){
      var school = Object.assign({}, schoolObj);
      school.students.forEach(function(student){
        if (Math.random() > 0.5){
          student.lastName += 'dogg';
        }
        else {
          student.firstName = "lil' "+ student.firstName;
        }
      });
    });
  }

O(1)

17. What is the time complexity of the following function?
  function countRepeats(strArr){
    var repeats = 0;
    strArr.forEach(function(str, index){
      var currentRepeats = strArr.filter(function(innerStr, idx){
        return (innerStr === str && index != idx)
      });
      if (currentRepeats.length > 0){
        repeats++;
      }
    });
    return repeats;
  }

O(N)

18. What are the main operations of a stack?

a).push() adds value to the front of the stack
b).pop() removes value from the front and returns value
LIFO- Last item added or 'pushed' Into the stack will be
the First item removed or 'popped' Out of the stack

19. What are the main operations of a queue?

a)enqueue() adds value to the back of the queue
b)dequeue() removes value from front, returns value
FIFO- First item added or 'enqueued' Into the queue
will be the First item removed or 'dequeued' Out of
the queue

20. What is the runtime of bubblesort? How does it work?

worst case O(N^2)
1. goes through the unsorted list one item at a time
2. compares each adjacent items
3. if item pair ar in the wrong order, items are swapped
4. process is repeated over and over until all items have been sorted

21. Create a personal website and upload it so that it is
accessible at yourdomain.fvi-grad.com.

i. The website must have your name, contact information,
skills, and at least two links to portfolio items you are
hosting on fvi-grad.
ii. The website must not be in a subdirectory of the
document root. ie.
It needs to be accessible by going to
yourusername.fvi-grad.com/ without anything after the slash.
iii. You can and should use a template
iv. Include the link to your website in your answers document
